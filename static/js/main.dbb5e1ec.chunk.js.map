{"version":3,"sources":["components/App/Header.jsx","components/App/Footer.jsx","components/Histogram/HistogramChart.js","components/Histogram/Histogram.jsx","data/data.js","components/App/App.js","index.js"],"names":["Header","Footer","currentYear","Date","getFullYear","MARGIN","WIDTH","HEIGHT","HistogramChart","element","props","width","height","svg","d3","append","attr","data","Object","entries","y","domain","d","range","x","map","padding","xAxisCall","call","yAxisCall","text","xlabel","ylabel","tooltip","tip","html","key_value","srcElement","__data__","selectAll","enter","i","bandwidth","on","show","hide","this","classed","Histogram","chartArea","useRef","useState","chart","setChart","useEffect","update","current","className","ref","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbb5e1ec.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n    return <header>\r\n        <h1>Histogram Component (React and D3)</h1>\r\n    </header>\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\n\r\nfunction Footer() {\r\n    const currentYear = new Date().getFullYear();\r\n    return <footer>\r\n      <p>React Component {currentYear}</p>\r\n    </footer>\r\n}\r\n\r\nexport default Footer","import * as d3 from 'd3';\r\nimport tip from \"d3-tip\";\r\n\r\nimport './histogram-styles.css';\r\nimport './tooltip-styles.css';\r\n\r\nconst MARGIN = { TOP: 10, BOTTOM: 50, LEFT: 70, RIGHT: 10}\r\nlet WIDTH = 800 - MARGIN.LEFT - MARGIN.RIGHT;\r\nlet HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\nexport default class HistogramChart{\r\n    constructor(element, props) {\r\n\r\n        // width and height configuration\r\n        if(props.width){\r\n            WIDTH = props.width - MARGIN.LEFT - MARGIN.RIGHT;\r\n        }\r\n\r\n        if(props.height) {\r\n            HEIGHT = props.height - MARGIN.LEFT - MARGIN.RIGHT;\r\n        }\r\n             \r\n        // adding svg element\r\n        const svg = d3.select(element)\r\n            .append(\"svg\")\r\n                .attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n                .attr(\"height\", HEIGHT+ MARGIN.TOP + MARGIN.BOTTOM)\r\n            .append(\"g\")\r\n                .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`);\r\n\r\n        // converting dictionary data to list\r\n        const data = Object.entries(props.data);\r\n\r\n        // defining scales for x and y axis\r\n        const y = d3.scaleLinear()\r\n            .domain([\r\n                d3.min(data, d => d[1]) * 0.95, \r\n                d3.max(data, d => d[1])])\r\n            .range([HEIGHT, 0]);\r\n\r\n        const x = d3.scaleBand()\r\n            .domain(data.map(d => d[0]))\r\n            .range([0, WIDTH])\r\n            .padding(0.4);\r\n\r\n        // defining axis generators\r\n        const xAxisCall = d3.axisBottom(x);\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", `translate(0, ${HEIGHT})`)\r\n            .attr(\"class\", \"text-axis\")\r\n            .call(xAxisCall);\r\n\r\n        const yAxisCall = d3.axisLeft(y);\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"text-axis\")\r\n            .call(yAxisCall);\r\n\r\n        // adding labels\r\n        svg.append(\"text\")\r\n            .attr(\"class\", \"chart-label\")\r\n            .attr(\"x\", WIDTH / 2)\r\n            .attr(\"y\", HEIGHT + 50)\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .text(props.xlabel);\r\n            \r\n        svg.append(\"text\")\r\n            .attr(\"class\", \"chart-label\")\r\n            .attr(\"x\", -(HEIGHT / 2))\r\n            .attr(\"y\", -50)\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .text(props.ylabel);\r\n\r\n        // defining tooltip\r\n        let tooltip = tip().attr('class', 'd3-tip').html(function(d) { \r\n            const key_value = d.srcElement.__data__;\r\n            let text = `<span class=\"tooltip-text\">${key_value[0]}:</span> <span class=\"tooltip-text\">${key_value[1]}</span>`;\r\n            return text;\r\n        });\r\n        svg.call(tooltip)\r\n\r\n        const rects = svg.selectAll(\"rect\")\r\n            .data(data);\r\n\r\n                    \r\n        // chart bars\r\n        rects.enter()\r\n            .append(\"rect\")\r\n                .attr(\"class\", \"bar\")\r\n                .attr(\"x\", (d, i) => x(d[0]))\r\n                .attr(\"y\", d => y(d[1]))\r\n                .attr(\"width\", x.bandwidth)\r\n                .attr(\"height\", d => HEIGHT - y(d[1]))\r\n                .attr(\"fill\", \"steelblue\")                \r\n                .on('mouseover', tooltip.show)\r\n                .on('mouseout', tooltip.hide)  \r\n                .on('click', function() {\r\n                    d3.select(this).classed(\"bar-selected\", \r\n                        d3.select(this).classed(\"bar-selected\") ? false : true);\r\n                });      \r\n    }\r\n\r\n    update(){\r\n\r\n    }\r\n}","import React, { useRef, useState, useEffect } from 'react';\r\nimport HistogramChart from \"./HistogramChart\";\r\n\r\nconst Histogram = (props) => {\r\n    const chartArea = useRef(null)\r\n    const [chart, setChart] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if(!chart) {\r\n            setChart(new HistogramChart(chartArea.current, props))\r\n        }\r\n        else{\r\n            chart.update()\r\n        }\r\n    }, [chart, props])\r\n    return (\r\n        <div className=\"chart-area\" ref={chartArea}></div>\r\n    )\r\n}\r\n\r\nexport default Histogram","export default {\r\n  \"apples\": 100, \r\n  \"oranges\": 50, \r\n  \"pears\": 150, \r\n  \"banana\": 75\r\n}","import React from 'react';\nimport './App.css';\n\nimport Header from './Header'\nimport Footer from './Footer'\nimport Histogram from \"../Histogram/Histogram\"\nimport data from '../../data/data'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Histogram data={data} \n        ylabel=\"Counts\" \n        xlabel=\"Fruits\"\n        width=\"800\"\n        height=\"500\" />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}